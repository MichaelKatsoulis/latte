package main

// Frame containing a matchable PACKET_IN message (mPktIn)
// Structure: mPktInHead + mPktIn

// - headers
var mPktInHead = []byte{
	// eth header
	0x52, 0x54, 0x00, 0x6d, 0xbc, 0xe1, 0x52, 0x54, 0x00, 0x73, 0x37, 0xd7, 0x08, 0x00,
	// IPv4 header
	0x45, 0xc0, 0x00, 0x88, 0x4b, 0x93, 0x40, 0x00, 0x40, 0x06, 0xa4, 0xb6, 0xc0, 0xa8, 0x64, 0x14,
	0xc0, 0xa8, 0x64, 0x01,
	// TCP header
	0x85, 0xf7, 0x19, 0xfd, 0xab, 0xdf, 0xce, 0x03, 0xf4, 0xfb, 0xa3, 0xa1, 0x80, 0x18, 0x01, 0x69,
	0x49, 0xe1, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0xff, 0xff, 0xf0, 0x17, 0x23, 0x84, 0x29, 0x61}

// - matchable PACKET_IN message
var mPktIn = []byte{
	0x04,       //OF_version
	0x0a,       //OF_type
	0x00, 0x54, // length
	0x00, 0x00, 0x00, 0x00, // xid
	0xff, 0xff, 0xff, 0xff, // buffer_id
	0x00, 0x2a, // total_length
	0x01,                                           // reason
	0x00,                                           // table_id
	0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, // cookie
	// match
	0x00, 0x01, // match.type
	0x00, 0x0c, // match.length
	// match.oxm
	0x80, 0x00, // match.oxm.class
	0x00,                   // match.oxm.field
	0x04,                   // match.oxm.length
	0x00, 0x00, 0x00, 0x01, // match.oxm.value
	0x00, 0x00, 0x00, 0x00, // match.pad
	0x00, 0x00, // pad
	// data
	// data.eth
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, // data.eth.dst (00:00:00:00:00:0b)
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // data.eth.src (00:00:00:00:00:0a)
	0x08, 0x06, // data.eth.type (ARP)
	// data.arp
	0x00, 0x01, // data.arp.hardware_type (Ethernet)
	0x08, 0x00, // data.arp.protocol_type (IPv4)
	0x06,       // data.arp.hardware_size
	0x04,       // data.arp.protocol_size
	0x00, 0x02, // data.arp.opcode
	0xa6, 0x6c, 0xc8, 0x1e, 0x4a, 0x43, // data.arp.sender_mac_address
	0x0a, 0x00, 0x00, 0x09, // data.arp.sender_IP_address
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // data.arp.target_mac_address
	0x0a, 0x00, 0x00, 0x09} // data.arp.target_ip_address

// Frame containing a FLOW_MOD that matches to mPktIn.
// Structure: mFlowModHead + mFlowModU + mFlowMod, where:
// mFlowModU is an irrelevant FLOW_MOD message that does not match mPktIn,
// while mFlowMod is the correct one

// - matching FLOW_MOD headers
var mFlowModHead = []byte{
	// eth header
	0x52, 0x54, 0x00, 0x73, 0x37, 0xd7, 0x52, 0x54, 0x00, 0x6d, 0xbc, 0xe1, 0x08, 0x00,
	// IPv4 header
	0x45, 0x00, 0x00, 0xf4, 0x11, 0x8b, 0x40, 0x00, 0x40, 0x06, 0xdf, 0x12, 0xc0, 0xa8, 0x64, 0x01,
	0xc0, 0xa8, 0x64, 0x14,
	// TCP header
	0x19, 0xfd, 0x85, 0xf7, 0xf4, 0xfb, 0xa3, 0xa1, 0xab, 0xdf, 0xce, 0x57, 0x80, 0x18, 0x05, 0x98,
	0x4a, 0x4d, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x23, 0x84, 0x29, 0x6b, 0xff, 0xff, 0xf0, 0x17}

// - unmatching FLOW_MOD message
var mFlowModU = []byte{
	0x04, 0x0e, 0x00, 0x60, 0x00, 0x00, 0x08, 0x46, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x0e, 0x10, 0x00, 0x0a,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x18, 0x80, 0x00, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x00,
	0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

// - matching FLOW_MOD message
var mFlowMod = []byte{
	0x04,       // OF_version
	0x0e,       // OF_type (FLOW_MOD)
	0x00, 0x60, // length
	0x00, 0x00, 0x08, 0x47, // xid
	0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // cookie
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // cookie mask
	0x00,       // table_id
	0x00,       // command
	0x07, 0x08, // idle_timeout
	0x0e, 0x10, // hard_timeout
	0x00, 0x0a, // priority
	0xff, 0xff, 0xff, 0xff, // buffer_id
	0xff, 0xff, 0xff, 0xff, // out_port
	0xff, 0xff, 0xff, 0xff, // out_group
	0x00, 0x00, // flags
	0x00, 0x00, // pad
	// match
	0x00, 0x01, // match.type
	0x00, 0x18, // match.length
	// match.oxm
	0x80, 0x00, // match.oxm.class (OFPXMC_OPENFLOW_BASIC)
	0x06,                               // match.oxm.field (OFPXMT_OFB_ETH_DST)
	0x06,                               // match.oxm.length
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, //  match.oxm.value (00:00:00:00:00:0b)
	// match.oxm
	0x80, 0x00, // match.oxm.class (OFPXMC_OPENFLOW_BASIC)
	0x08,                               // match.oxm.field (OFPXMT_OFB_ETH_SRC)
	0x06,                               // match.oxm.length
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, //  match.oxm.value (00:00:00:00:00:0a)
	// instruction
	0x00, 0x04, // instruction.type
	0x00, 0x18, // instruction.length
	0x00, 0x00, 0x00, 0x00, // instruction.pad
	// instruction.action
	0x00, 0x00, // instruction.action.type
	0x00, 0x10, // instruction.action.length
	0x00, 0x00, 0x00, 0x02, // instruction.action.port
	0xff, 0xff, // instruction.action.max_length
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00} // instruction.action.pad

// Frame containing an unmatchable LLDP PACKET_IN
// - headers
var uPktInHead = []byte{
	0x52, 0x54, 0x00, 0x6d, 0xbc, 0xe1, 0x52, 0x54, 0x00, 0x73, 0x37, 0xd7, 0x08, 0x00,
	0x45, 0xc0, 0x00, 0xcd, 0xf0, 0x6c, 0x40, 0x00, 0x40, 0x06, 0xff, 0x97, 0xc0, 0xa8, 0x64, 0x14,
	0xc0, 0xa8, 0x64, 0x01,
	0x85, 0xf4, 0x19, 0xfd, 0x87, 0x0c, 0xc6, 0xa7, 0xe3, 0x02, 0xa2, 0x98, 0x80, 0x18, 0x01, 0x69,
	0x4a, 0x26, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0xff, 0xff, 0xf3, 0xb9, 0x23, 0x84, 0x37, 0xe7}

// - PACKET_IN
var uPktIn = []byte{
	0x04, 0x0a, 0x00, 0x99, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x6f,
	0x01, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x00, 0x0c, 0x80, 0x00,
	0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x23, 0x00, 0x00,
	0x00, 0x01, 0x16, 0x45, 0x56, 0x60, 0xb6, 0xeb, 0x88, 0xcc, 0x02, 0x07, 0x04, 0x5a, 0xcd, 0xca,
	0x96, 0x02, 0x49, 0x04, 0x02, 0x07, 0x33, 0x06, 0x02, 0x13, 0x37, 0x0a, 0x17, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x39, 0x39, 0x38, 0x33, 0x39, 0x39, 0x31, 0x33, 0x36, 0x32,
	0x34, 0x31, 0x33, 0x37, 0xfe, 0x1d, 0x00, 0x26, 0xe1, 0x00, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6c,
	0x6f, 0x77, 0x3a, 0x39, 0x39, 0x38, 0x33, 0x39, 0x39, 0x31, 0x33, 0x36, 0x32, 0x34, 0x31, 0x33,
	0x37, 0x3a, 0x33, 0xfe, 0x14, 0x00, 0x26, 0xe1, 0x01, 0x43, 0x68, 0xd0, 0x4d, 0x6a, 0x67, 0x99,
	0x81, 0xc4, 0x4a, 0x3a, 0x84, 0x6c, 0x56, 0x6d, 0xb7, 0x00, 0x00}

// Frame containing an unmatching FLOW_MOD
// - headers
var uFlowModHead = []byte{
	0x52, 0x54, 0x00, 0x73, 0x37, 0xd7, 0x52, 0x54, 0x00, 0x6d, 0xbc, 0xe1, 0x08, 0x00,
	0x45, 0x00, 0x00, 0x94, 0x04, 0x45, 0x40, 0x00, 0x40, 0x06, 0xec, 0xb8, 0xc0, 0xa8, 0x64, 0x01,
	0xc0, 0xa8, 0x64, 0x14,
	0x19, 0xfd, 0x85, 0xf5, 0x19, 0xac, 0x94, 0xdd, 0xf6, 0xdd, 0xe6, 0x7c, 0x80, 0x18, 0x05, 0x98,
	0x49, 0xed, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x23, 0x84, 0x2b, 0xff, 0xff, 0xff, 0xf0, 0xbc}

// - FLOW_MOD
var uFlowMod = []byte{
	0x04, 0x0e, 0x00, 0x60, 0x00, 0x00, 0x08, 0x4c, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x0e, 0x10,
	0x00, 0x0a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x80, 0x00, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43,
	0x80, 0x00, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00}

// Frame containing a MULTIPART_REQUEST
// - headers
var multReqHead = []byte{
	0x52, 0x54, 0x00, 0x73, 0x37, 0xd7, 0x52, 0x54, 0x00, 0x6d, 0xbc, 0xe1, 0x08, 0x00, 0x45, 0x00,
	0x00, 0x4c, 0x46, 0xad, 0x40, 0x00, 0x40, 0x06, 0xaa, 0x98, 0xc0, 0xa8, 0x64, 0x01, 0xc0, 0xa8,
	0x64, 0x14, 0x19, 0xfd, 0x85, 0xf4, 0xe3, 0x02, 0x5b, 0x94, 0x87, 0x0c, 0x6c, 0x4f, 0x80, 0x18,
	0x05, 0x98, 0x49, 0xa5, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x23, 0x84, 0x29, 0x97, 0xff, 0xff,
	0xf0, 0x22}

// - MULTIPART_REQUEST
var multReq = []byte{
	0x04, 0x12, 0x00, 0x18, 0x00, 0x00, 0x08, 0x4b, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00}

// Frame containing a MULTIPART_REPLY
// - headers
var multReplyHead = []byte{
	0x52, 0x54, 0x00, 0x6d, 0xbc, 0xe1, 0x52, 0x54, 0x00, 0x73, 0x37, 0xd7, 0x08, 0x00, 0x45, 0xc0,
	0x00, 0x44, 0xef, 0x78, 0x40, 0x00, 0x40, 0x06, 0x01, 0x15, 0xc0, 0xa8, 0x64, 0x14, 0xc0, 0xa8,
	0x64, 0x01, 0x85, 0xf4, 0x19, 0xfd, 0x87, 0x0c, 0x6c, 0x4f, 0xe3, 0x02, 0x5b, 0xac, 0x80, 0x18,
	0x01, 0x69, 0x49, 0x9d, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0xff, 0xff, 0xf0, 0x23, 0x23, 0x84,
	0x29, 0x97}

// - MULTIPART_REPLY
var multReply = []byte{
	0x04, 0x13, 0x00, 0x10, 0x00, 0x00, 0x08, 0x4b, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00}
